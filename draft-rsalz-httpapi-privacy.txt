



Building Blocks for HTTP APIs                                    R. Salz
Internet-Draft                                                 M. Bishop
Intended status: Informational                       Akamai Technologies
Expires: 29 December 2024                                      M. Kleidl
                                                                    TODO
                                                            27 June 2024


                          API Keys and Privacy
                   draft-rsalz-httpapi-privacy-latest

Abstract

   TODO Abstract

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://richsalz.github.io/draft-rsalz-httpapi-privacy/draft-rsalz-
   httpapi-privacy.html.  Status information for this document may be
   found at https://datatracker.ietf.org/doc/draft-rsalz-httpapi-
   privacy/.

   Discussion of this document takes place on the Building Blocks for
   HTTP APIs Working Group mailing list (mailto:httpapi@ietf.org), which
   is archived at https://mailarchive.ietf.org/arch/browse/httpapi/.
   Subscribe at https://www.ietf.org/mailman/listinfo/httpapi/.

   Source for this draft and an issue tracker can be found at
   https://github.com/richsalz/draft-rsalz-httpapi-privacy.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 29 December 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Notes
     3.1.  From some email
   4.  Security Considerations
   5.  IANA Considerations
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   TODO Introduction

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Notes

   I don't disagree with the thrust of the article, but I take a
   different message from it.  It's not that the redirect is bad; the
   redirect is beside the point.

   An unencrypted authenticated request should, in general, not succeed.
   It should at a minimum fail and ideally revoke the just-disclosed
   credentials.

   The redirect is bad in this case because the subsequent request
   succeeded.  Returning a 200 over HTTP would be just as bad.

   Browsers warn if you enter a password field on a form that sends to
   http.  Api clients don't, and many API's have an API key in the link
   or as a header field.

3.1.  From some email

   I chose to explicitly address redirects in particular, as they seem
   to be the status quo that most APIs implement, probably due to
   redirects being the standard operating procedure" in webdev lore.
   Redirects are also often the simplest option due to server software
   like Caddy supporting them out of the box.

   Ben Bucksch had good points.  Failing unencrypted requests (or
   connection attempts) is a relatively low hanging fruit for improving
   the aforementioned status quo.  Then at least accidental plain HTTP
   use can be noticed easily and fixed early, reducing the window of
   opportunity for attacks.  API providers can also implement failures
   first and then move on to the more complex topic of token auto-
   revocation.  Anthropic chose an interesting approach: their API now
   returns an error that also suggests rotating the API keys manually.
   I think its a good quick improvement, informing the API consumer of a
   recommended path forward.

   As for using the HTTP status code 426, I almost implemented that for
   our API when I noticed that NPM uses it.  However,
   https://httpwg.org/specs/rfc9110.html#status.426 states:

   "the server MUST send an Upgrade header field"

   Later in section 7.8 (https://httpwg.org/specs/
   rfc9110.html#rfc.section.7.8):

   The Upgrade header field only applies to switching protocols on top
   of the existing connection; it cannot be used to switch the
   underlying connection (transport) protocol, nor to switch the
   existing communication to a different connection.

   As the switch from HTTP to HTTPS would require a new connection, I
   felt that it was not a perfect match.  Thats why I ended up emulating
   Stripe with status code 403, which "indicates that the server
   understood the request but refuses to fulfill it."  A bit more open-
   ended, but not a perfect match either.

4.  Security Considerations

   This entire document is about security of HTTP API interactions.

5.  IANA Considerations

   This document has no IANA actions.

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

6.2.  Informative References

   [BLOG]     Viide, J., "Your API Shouldn't Redirect HTTP to HTTPS",
              May 2024, <https://jviide.iki.fi/http-redirects>.

Acknowledgments

   We are grateful to Joachim Viide for his [BLOG] blog posting that
   brought up the issue.

Authors' Addresses

   Rich Salz
   Akamai Technologies
   Email: rsalz@akamai.com


   Mike Bishop
   Akamai Technologies
   Email: mbishop@akamai.com


   Marius Kleidl
   TODO
   Email: marius@transloadit.com
